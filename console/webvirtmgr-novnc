#!/usr/bin/env python

import os
import sys
import logging

DIR_PATH = os.path.dirname(os.path.abspath(__file__))
ROOT_PATH = os.path.abspath(os.path.join(DIR_PATH, '..', ''))
# VENV_PATH = ROOT_PATH + '/venv/lib/python2.7/site-packages'
LISTEN_HOST = '0.0.0.0'
LISTEN_PORT = '6080'

if ROOT_PATH not in sys.path:
    sys.path.append(ROOT_PATH)
# if VENV_PATH not in sys.path:
#     sys.path.append(VENV_PATH)

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tsssite.settings")

import Cookie
import socket
import django
try:
    import websockify as wsproxy
except:
    from novnc import wsproxy


#logging.basicConfig(filename = '/var/log/my.txt', level = logging.DEBUG)
logging.debug("+++++++++++++++++++++++++++++++++,test logging")

class NovaWebSocketProxy(wsproxy.WebSocketProxy):
    def __init__(self, *args, **kwargs):
        wsproxy.WebSocketProxy.__init__(self, *args, **kwargs)

    def new_client(self):
        """
        Called after a new WebSocket connection has been established.
        """
        logging.debug(__name__)

        cookie = Cookie.SimpleCookie()
        cookie.load(self.headers.getheader('cookie'))
        token = cookie['token'].value

        from sysmgr.models import Host, Instance
        from tsssite.server import ConnServer

        try:
            #instance = Instance.objects.get(vname=token)
            instance = Instance(host_id=1, vname=token, vnc_passwd='123456')
            print "++++++++++++++++++"
            print token  
            #host = Host.objects.get(id=instance.host.id)
            host = Host.objects.get(id=1)
            print host.name
            print "===================="
            conn = ConnServer(host)

            if type(conn) == dict:
                pass
            else:
                port = conn.vnc_get_port(instance.vname)
                #host = instance.host.hostname
                host = '127.0.0.1'
        except:
            logging.debug('--------------------------------------------except')
            port = None
            host = None

        # Connect to the target
        self.msg("connecting to: %s:%s" % (host, port))
        tsock = self.socket(host, port, connect=True)

        if self.verbose and not self.daemon:
            print(self.traffic_legend)

        # Start proxying
        try:
            self.do_proxy(tsock)
        except:
            if tsock:
                tsock.shutdown(socket.SHUT_RDWR)
                tsock.close()
                self.vmsg("%s:%s: Target closed" % (host, port))
            raise

if __name__ == '__main__':
    # Create and start the NovaWebSockets proxy
    server = NovaWebSocketProxy(listen_host=LISTEN_HOST,
                                listen_port=LISTEN_PORT,
                                source_is_ipv6=False,
                                verbose=True,
                                cert='self.pem',
                                key=None,
                                ssl_only=False,
                                daemon=False,
                                record=False,
                                web=False,
                                target_host='ignore',
                                target_port='ignore',
                                wrap_mode='exit',
                                wrap_cmd=None)
    server.start_server()